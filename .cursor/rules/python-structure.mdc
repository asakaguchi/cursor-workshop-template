---
description: 
globs: 
alwaysApply: true
---

# Pythonプロジェクト構造ガイドライン

## 推奨構造：srcレイアウト

モダンなPython開発では、Python Packaging Authority (PyPA) が推奨するsrcレイアウトを採用します。
（参考: https://packaging.python.org/en/latest/discussions/src-layout-vs-flat-layout/）

### 基本構造
```
cursor-workshop-template/
├── src/                    # ソースコードを配置するsrcディレクトリ
│   └── product_api/        # インポート可能なパッケージ
│       ├── __init__.py
│       ├── main.py         # エントリーポイント
│       ├── models.py       # データモデル
│       └── storage.py      # ビジネスロジック
├── tests/                  # テストコード
│   ├── __init__.py
│   └── test_*.py
├── docs/                   # ドキュメント
├── scripts/                # ユーティリティスクリプト
├── .github/                # CI/CDワークフロー
│   └── workflows/
├── .gitignore
├── pyproject.toml          # 信頼できる唯一の情報源 (Single Source of Truth)
├── LICENSE                 # ライセンスファイル
└── README.md
```

## なぜsrcレイアウト？

### 技術的な利点

1. **意図しないインポートの防止**
   - Pythonは常にカレントディレクトリを`sys.path`の先頭に追加します
   - フラットレイアウトでは、開発中のローカルコードが意図せずインポートされる可能性があります
   - srcレイアウトでは、パッケージが`src/`内に隔離されるため、この問題を回避できます

2. **インストールベースのテストの強制**
   - テスト実行時、パッケージがインストールされた状態であることを強制します
   - エンドユーザーと同じ環境でテストできるため、パッケージング問題を早期発見できます

3. **クリーンな名前空間**
   - `README.md`、`pyproject.toml`などの管理ファイルとPythonコードを明確に分離
   - プロジェクトルートが整理され、誤って管理ファイルをインポートすることを防げます

### 歴史的背景

- The Hitchhiker's Guide to Python（HHGTTG）はかつてフラットレイアウトを推奨していました
- しかし、現代のPythonエコシステムでは、srcレイアウトが明確なベストプラクティスです
- HHGTTGの思想（クリーンコード、モジュール性）は今も価値がありますが、技術的実装は更新が必要です

## 命名規則

- **モジュール名**: 短く、lowercase、特殊記号（. や ? ）を避ける
- **パッケージ名**: プロジェクト名と一致させる（cursor-workshop → product_api）
- **ファイル名**: `my.spam.py` のような形式は避ける
- **クラス名**: CapWords（例: ProductModel）
- **関数名**: lowercase_with_underscores（例: get_product_by_id）
- **定数**: UPPERCASE_WITH_UNDERSCORES（例: MAX_ITEMS）

## インポートの順序
```python
# 1. 標準ライブラリ
import os
import sys
from datetime import datetime

# 2. サードパーティライブラリ
from fastapi import FastAPI
from pydantic import BaseModel

# 3. ローカルアプリケーション
from product_api.models import Product
from product_api.storage import InMemoryStorage
```

## モダンなパッケージ管理

### pyproject.tomlを中心とした設定

```toml
[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "product_api"
version = "0.1.0"
description = "商品管理 API - Cursor ハンズオン"
requires-python = ">=3.12"
dependencies = [
    "fastapi>=0.100.0",
    "uvicorn[standard]>=0.23.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0",
    "ruff>=0.1.0",
    "mypy>=1.0",
]

[tool.ruff]
target-version = "py312"
line-length = 88

[tool.mypy]
python_version = "3.12"
strict = true
```

### 推奨ツール

1. **パッケージマネージャー**: uv（高速）、Poetry、PDM、Hatch
2. **リンター/フォーマッター**: Ruff（flake8、black、isortの統合版）
3. **型チェッカー**: mypy
4. **テストフレームワーク**: pytest

## 開発環境のセットアップ

### uvを使用する場合
```bash
# プロジェクトの初期化
uv init

# 依存関係の同期
uv sync

# 開発用依存関係も含めて同期
uv sync --dev

# 新しいパッケージを追加
uv add fastapi

# 開発用パッケージを追加
uv add --dev pytest
```

### テストの実行
```bash
# 全テストの実行
uv run pytest

# 特定のテストファイルの実行
uv run pytest tests/test_models.py

# カバレッジ付きテスト
uv run pytest --cov=src/product_api
```

## srcレイアウトでのテスト

srcレイアウトでは、パッケージをインストールしてからテストする必要があります：

```bash
# 編集可能モードでインストール
uv pip install -e .

# または、uvを使用してテスト実行
uv run pytest
```

## 実践例

良い例：
```python
# src/product_api/models.py
from datetime import datetime
from pydantic import BaseModel, Field

class ProductModel(BaseModel):
    """商品データモデル"""
    id: int = Field(..., description="商品ID")
    name: str = Field(..., min_length=1, description="商品名")
    price: float = Field(..., gt=0, description="単価")
    created_at: datetime = Field(default_factory=datetime.now)
```

避けるべき例：
```python
# models.py（srcディレクトリの外）
class product_model:  # クラス名が小文字
    ProductName: str  # 変数名が大文字始まり
```

## まとめ

- **srcレイアウト**を採用してパッケージング問題を防ぐ
- **pyproject.toml**を中心に設定を一元管理
- **モダンなツール**（uv、Ruff、mypy）を活用
- **型ヒント**と**ドキュメント**を重視
- **テスト駆動開発**（TDD）を実践