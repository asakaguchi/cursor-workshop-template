---
description: 
globs: 
alwaysApply: true
---
# コード品質・開発ガイドライン

このドキュメントは、このコードベースで作業する際の重要な情報を含んでいます。
以下のガイドラインを正確に守ってください。

## 開発の基本ルール

### 1. パッケージ管理
- **必須: uvのみ使用、pipは絶対に使用禁止**
- インストール: `uv add package`
- ツール実行: `uv run tool`
- アップグレード: `uv add --dev package --upgrade-package package`
- **禁止**: `uv pip install`、`@latest`構文

### 2. コード品質要件
- **すべてのコードに型ヒント必須**
- **パブリックAPIにはdocstring必須**
- **関数は焦点を絞り、小さく設計**
- **既存パターンを正確に踏襲**
- **行長制限: 最大88文字**（このプロジェクトではPEP 8の79文字を88文字に拡張）

### 3. テスト要件
- **フレームワーク**: `uv run --frozen pytest`
- **非同期テスト**: anyio使用、asyncio使用禁止
- **カバレッジ**: エッジケースとエラーケースをテスト
- **新機能にはテスト必須**
- **バグ修正には回帰テスト必須**

## Pythonコードフォーマットツール

### 1. Ruff（主要フォーマッター・リンター）
- **フォーマット**: `uv run --frozen ruff format .`
- **チェック**: `uv run --frozen ruff check .`
- **修正**: `uv run --frozen ruff check . --fix`

#### 重要なRuffの問題:
- 行長制限（88文字）
- インポートソート（I001）
- 未使用インポート

#### 行の折り返しガイドライン:
- **文字列**: 括弧を使用
- **関数呼び出し**: 適切なインデントで複数行
- **インポート**: 複数行に分割

### 2. 型チェック
- **ツール**: `uv run --frozen pyright`
- **要件**:
  - OptionalのNoneチェックを明示的に
  - 文字列の型の絞り込み
  - バージョン警告はチェックが通れば無視可能

### 3. Pre-commitフック
- **設定**: `.pre-commit-config.yaml`
- **実行**: git commit時
- **ツール**: Prettier（YAML/JSON）、Ruff（Python）
- **Ruffアップデート**:
  - PyPIバージョンをチェック
  - config revを更新
  - 設定を最初にコミット

## エラー解決の優先順位

### CI失敗時の修正順序:
1. **フォーマットエラーを最初に**
2. **型エラーを2番目に**
3. **リントエラーを最後に**

### よくある問題と解決策:

#### 行長制限違反:
- 文字列を括弧で折り返し
- 関数呼び出しを複数行に
- インポートを分割

#### 型エラー:
- 完全な行コンテキストを取得
- Optional型をチェック
- 型の絞り込みを追加
- 関数シグネチャを確認

#### Pytestの問題:
- anyio pytest markが見つからない場合は以下を試す:
  `PYTEST_DISABLE_PLUGIN_AUTOLOAD="" uv run --frozen pytest`

## ベストプラクティス

### 開発ワークフロー:
- **コミット前にgit statusを確認**
- **型チェック前にフォーマッターを実行**
- **変更は最小限に保つ**
- **既存パターンに従う**
- **パブリックAPIにドキュメント記述**
- **テストを徹底的に実施**

### Gitコミットガイドライン:
- ユーザーレポートに基づくバグ修正・機能追加の場合:
  ```bash
  git commit --trailer "Reported-by:<name>"
  ```
- GitHub issue関連のコミットの場合:
  ```bash
  git commit --trailer "Github-Issue:#<number>"
  ```
- **絶対に言及禁止**: `co-authored-by`やツール使用について

### プルリクエスト:
- 詳細な説明を作成
- 問題の説明と解決アプローチに焦点
- 必要でない限りコードの詳細は記述しない
- **絶対に言及禁止**: `co-authored-by`やツール使用について

## 品質チェックコマンド

```bash
# 完全な品質チェックシーケンス
uv run --frozen ruff format .
uv run --frozen ruff check . --fix
uv run --frozen pyright
uv run --frozen pytest

# Markdown品質チェック
markdownlint *.md
```

コード変更後はこれらのコマンドを実行して品質基準を確保してください。