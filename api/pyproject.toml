[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "product-api"
version = "0.1.0"
description = "商品管理API - FastAPI based REST API"
readme = "README.md"
requires-python = ">=3.12"
license = {text = "MIT"}
authors = [
    {name = "Cursor Workshop", email = "workshop@example.com"},
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.12",
    "Framework :: FastAPI",
]
dependencies = [
    "fastapi>=0.100.0",
    "uvicorn[standard]>=0.23.0",
    "pydantic>=2.0.0",
]

[project.scripts]
product-api = "main:app"

[tool.ruff]
target-version = "py312"
line-length = 100
exclude = [".git", ".ruff_cache", ".venv", ".vscode"]
preview = true

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
    "ANN", # flake8-annotations
    "D",  # pydocstyle
    "PTH", # flake8-use-pathlib
    "RUF", # Ruff-specific rules
    "SIM", # flake8-simplify
]
ignore = [
    "D100", # Missing docstring in public module
    "D104", # Missing docstring in public package
    "D107", # Missing docstring in __init__
    "ANN101", # Missing type annotation for self
    "ANN102", # Missing type annotation for cls
    "ANN401", # Dynamically typed expressions (Any)
]
unfixable = ["F401", "F841"]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"

[tool.ruff.lint.pydocstyle]
convention = "google"

[dependency-groups]
dev = [
    "pytest>=8.0",
    "pytest-asyncio>=0.21.0",
    "anyio>=3.0.0",
    "ruff>=0.11.0",
    "httpx>=0.24.0",
]