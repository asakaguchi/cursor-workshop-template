[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "cursor-workshop-template"
version = "0.1.0"
description = "Cursor×Python×GitHub ハンズオン用テンプレート - 商品管理APIとWeb UI"
readme = "README.md"
requires-python = ">=3.12"
license = {text = "MIT"}
authors = [
    {name = "Cursor Workshop Template", email = "workshop@example.com"},
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.12",
]
dependencies = [
    "fastapi>=0.100.0",
    "uvicorn[standard]>=0.23.0",
    "pydantic>=2.0.0",
    "streamlit>=1.28.0",
]


[project.scripts]
product-api = "product_api.main:app"

[tool.hatch.build.targets.wheel]
packages = ["src/product_api", "src/product_ui"]

[tool.ruff]
target-version = "py312"
line-length = 100
exclude = [".git", ".ruff_cache", ".venv", ".vscode"]
preview = true

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
    "ANN", # flake8-annotations
    "D",  # pydocstyle
    "PTH", # flake8-use-pathlib
    "RUF", # Ruff-specific rules
    "SIM", # flake8-simplify
]
ignore = [
    "D100", # Missing docstring in public module
    "D104", # Missing docstring in public package
    "D107", # Missing docstring in __init__
    "ANN101", # Missing type annotation for self
    "ANN102", # Missing type annotation for cls
    "ANN401", # Dynamically typed expressions (Any)
]
unfixable = ["F401", "F841"]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
pythonpath = ["src"]
addopts = "-v --tb=short --cov=src/product_api --cov-report=term-missing"

[tool.coverage.run]
source = ["src/product_api"]
branch = true

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
]

[tool.pyright]
pythonVersion = "3.12"
include = ["src", "tests"]
exclude = ["**/node_modules", "**/__pycache__", ".venv"]
reportMissingTypeStubs = false
typeCheckingMode = "basic"

[dependency-groups]
dev = [
    "pre-commit>=3.5.0",
    "pytest>=8.0",
    "pytest-cov>=4.0",
    "pytest-asyncio>=0.21.0",
    "anyio>=3.0.0",
    "ruff>=0.11.0",
    "httpx>=0.24.0",
    "pyright>=1.1.0",
]
